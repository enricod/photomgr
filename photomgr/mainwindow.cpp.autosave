#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "libraw/libraw.h"
#include <iostream>
#include <QFileDialog>
#include <QDirIterator>
#include <QDebug>
using namespace std;


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

/**
 * @brief MainWindow::selezionaDir scelta della directory
 */
void MainWindow::selezionaDir() {

    QString dir = QFileDialog::getExistingDirectory(this, tr("Open Directory"),
                                                    "/home",
                                                    QFileDialog::ShowDirsOnly
                                                    | QFileDialog::DontResolveSymlinks);


    QDirIterator fileItr(dir, QStringList() << "*.RAF", QDir::Files, QDirIterator::Subdirectories);
    while (fileItr.hasNext()) {
        QString filename = fileItr.next();
        creaThumbnail(dir, filename );

    }

    cout << dir.toStdString() << endl;




}

char* MainWindow::toCharArray(QString qstring) {
  QByteArray ba = qstring.toLocal8Bit();
  return ba.data();

}

void MainWindow::creaThumbnail(QString dir,  QString filename) {
    QStringList pieces = filename.split( "/" );
    QString fileName = pieces.value( pieces.length() - 1 );

    const char* filename2 = toCharArray(filename);

    // const char* outFilename =  "/home/enrico/Pictures/fujifilm/ENDO0179_LIBRAW_TEST.ppm";
    const char* thumbOutFilename = toCharArray(dir.append("/").append(fileName).append("_thumb.jpg") );
    qDebug("creazione thumb per %s", thumbOutFilename);

    LibRaw RawProcessor;
    int ret = RawProcessor.open_file(filename2, 1);

    if ((ret = RawProcessor.unpack()) != LIBRAW_SUCCESS)
    {
        fprintf(stderr, "Cannot unpack %s: %s\n", filename2, libraw_strerror(ret));
        return;
    }


/*
    if (LIBRAW_SUCCESS != (ret = RawProcessor.dcraw_process()))
    {
        fprintf(stderr, "Cannot do postpocessing on %s: %s\n", filename, libraw_strerror(ret));
        if (LIBRAW_FATAL_ERROR(ret))
            return;
    }

    cout << "done processing" << endl;

    // RawProcessor.raw2image();

    //RawProcessor.imgdata.params.output_tiff;
    ret = RawProcessor.dcraw_ppm_tiff_writer(outFilename);
    cout << "scrittura ppm, ret=" << ret << endl;

    */
    RawProcessor.unpack_thumb();
    ret = RawProcessor.dcraw_thumb_writer(thumbOutFilename);
    cout << "scrittura thumbnail fatta, ret=" << ret << endl;



    RawProcessor.recycle();
}

MainWindow::~MainWindow()
{
    delete ui;
}
